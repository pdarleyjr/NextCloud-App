name: Deploy

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# Limit concurrency to one deployment per environment
concurrency:
  group: deploy-${{ github.event.inputs.environment || (startsWith(github.ref, 'refs/tags/') && 'production' || 'staging') }}
  cancel-in-progress: false

# Define permissions needed for deployment
permissions:
  contents: read
  deployments: write

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' || github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/') }}
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, gd, xml, zip, curl
          tools: composer:v2

      - name: Install dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Create deployment archive
        run: |
          mkdir -p ./build
          zip -r ./build/nextcloud-app.zip . -x "*.git*" "*node_modules*" "*tests*" "*build*"

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: nextcloud-app-staging
          path: ./build/nextcloud-app.zip

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # This would be replaced with actual deployment commands
          # For example, using SSH to copy files to a server or deploying to a cloud service
          echo "Deployment to staging completed successfully"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/') }}
    environment:
      name: production
      url: https://example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, gd, xml, zip, curl
          tools: composer:v2

      - name: Install dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Create deployment archive
        run: |
          mkdir -p ./build
          zip -r ./build/nextcloud-app.zip . -x "*.git*" "*node_modules*" "*tests*" "*build*"

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: nextcloud-app-production
          path: ./build/nextcloud-app.zip

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # This would be replaced with actual deployment commands
          # For example, using SSH to copy files to a server or deploying to a cloud service
          echo "Deployment to production completed successfully"

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./build/nextcloud-app.zip
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
